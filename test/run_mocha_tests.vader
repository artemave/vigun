Before:
  lua require('vigun.config').setup({ remember_last_command = false })
After:
  " Reset plugin config and restore baseline from test/vimrc
  lua require('vigun.config')._reset()
  source test/vimrc

Given javascript (js spec file):
  const {expect} = require('chai')

  describe('a thing', function() {
    beforeEach(function() {
      this.timeout = 200
    })

    it('does this', function() {
      const a = 2
      expect(a).to.eq(2)
    })

    it ('does not do that', function() {
      const a = 2
      expect(a).to.eq(2)
    })

    it('withstands "quotes" within quotes', function() {
      expect(true).to.eq(true)
    })

    context('when a thing is true', function() {
      it('does this', function() {
        expect(true).to.eq(true)
      })

      it('does not do that', function() {
        expect(true).to.eq(true)
      })
    })

    context('when a thing is false', function() {
      it('does this', function() {
        expect(true).to.eq(true)
      })

      it('does not do that', function() {
        expect(true).to.eq(true)
      })
    })

    it(
      'handles test title on separate line', () => {
        expect(true).to.eq(true)
      }
    )

    it('backticks `also` work', function() {
      expect(true).to.eq(true)
    })
  })

Execute (when there is no command for a file name):
  file blahStuff.js
  AssertThrows VigunRun all
  Assert match(g:vader_exception, 'Vigun: no enabled config for blahStuff.js')

Execute (default run all tests in a file):
  file testSpec.js
  VigunRun all
  AssertEqual "./node_modules/.bin/mocha testSpec.js", GetLastMessage()

Execute (default run test under cursor):
  file testSpec.js
  normal 14j
  VigunRun nearest
  AssertEqual "./node_modules/.bin/mocha --fgrep 'a thing does not do that' testSpec.js", GetLastMessage()

Execute (default debug test under cursor):
  file testSpec.js
  normal 14j
  VigunRun debug-nearest
  AssertEqual "./node_modules/.bin/mocha --inspect-brk --no-timeouts --fgrep 'a thing does not do that' testSpec.js", GetLastMessage()

Execute (test name has quotes inside quotes):
  file testSpec.js
  normal 19j
  VigunRun nearest
  AssertEqual "./node_modules/.bin/mocha --fgrep 'a thing withstands \"quotes\" within quotes' testSpec.js", GetLastMessage()

Execute (with a different command):
  file browser/testSpec.js
  lua << EOF
  require('vigun.config').setup({
    mocha = {
      -- In this test, only override commands; keep defaults for nodes/enabled
      commands = {
        all = function(_)
          local f = vim.fn.expand('%')
          if f:match('^browser/.*Spec%.js$') then
            return 'electron-mocha --renderer ' .. f
          else
            return 'mocha ' .. f
          end
        end,
        ['debug-all'] = function(_)
          local f = vim.fn.expand('%')
          if f:match('^browser/.*Spec%.js$') then
            return 'electron-mocha --interactive ' .. f
          else
            return 'mocha --inspect-brk --no-timeouts ' .. f
          end
        end,
        ['debug-nearest'] = function(info)
          local f = vim.fn.expand('%')
          if f:match('^browser/.*Spec%.js$') then
            local quoted = vim.fn.shellescape(info.test_title)
            return 'electron-mocha --interactive --fgrep ' .. quoted .. ' ' .. f
          else
            local parts = {}
            for _, c in ipairs(info.context_titles) do table.insert(parts, c) end
            table.insert(parts, info.test_title)
            local title = table.concat(parts, ' ')
            local quoted = vim.fn.shellescape(title)
            return 'mocha --inspect-brk --no-timeouts --fgrep ' .. quoted .. ' ' .. f
          end
        end,
      },
    },
  })
  EOF

  VigunRun all
  AssertEqual "electron-mocha --renderer browser/testSpec.js", GetLastMessage()

  normal 14j
  VigunRun debug-nearest
  AssertEqual "electron-mocha --interactive --fgrep 'does not do that' browser/testSpec.js", GetLastMessage()

  file testSpec.js
  VigunRun all
  AssertEqual "mocha testSpec.js", GetLastMessage()

  VigunRun debug-nearest
  AssertEqual "mocha --inspect-brk --no-timeouts --fgrep 'a thing does not do that' testSpec.js", GetLastMessage()

Execute (test name contains context):
  file testSpec.js
  normal 38j
  VigunRun nearest
  AssertEqual "./node_modules/.bin/mocha --fgrep 'a thing when a thing is false does not do that' testSpec.js", GetLastMessage()

Execute (handles test title on separate line):
  file testSpec.js
  normal 44j
  VigunRun nearest
  AssertEqual "./node_modules/.bin/mocha --fgrep 'a thing handles test title on separate line' testSpec.js", GetLastMessage()

Execute (handles backticks):
  file testSpec.js
  /backtick
  normal j
  VigunRun nearest
  AssertEqual "./node_modules/.bin/mocha --fgrep 'a thing backticks `also` work' testSpec.js", GetLastMessage()

Given javascript (.only test):
  const {expect} = require('chai')

  describe('a thing', function() {
    beforeEach(function() {
      this.timeout = 200
    })

    it.only('withstands "quotes" within quotes', function() {
      expect(true).to.eq(true)
    })
  })

Execute (.only uses all instead of nearest):
  file testSpec.js
  normal 8j
  VigunRun nearest
  AssertEqual "./node_modules/.bin/mocha testSpec.js", GetLastMessage()

  VigunRun debug-nearest
  AssertEqual './node_modules/.bin/mocha --inspect-brk --no-timeouts testSpec.js', GetLastMessage()
