filetype off
set rtp+=.

call system('mkdir -p ./tmp')

let test_repos = {
  \ 'nvim-treesitter': 'https://github.com/nvim-treesitter/nvim-treesitter.git',
  \ 'plenary.nvim': 'https://github.com/nvim-lua/plenary.nvim.git',
  \ 'vader.vim': 'https://github.com/junegunn/vader.vim.git'
  \ }

" Clone repositories if not present and add to runtime path
for [repo_name, repo_url] in items(test_repos)
  let repo_dir = './tmp/' . repo_name
  if !isdirectory(repo_dir)
    call system('git clone --depth 1 ' . repo_url . ' ' . repo_dir)
  endif
  execute 'set rtp+=' . repo_dir
endfor

filetype plugin indent on
syntax enable

fun GetLastMessage()
  redir => msgs
  silent messages
  redir END
  return get(split(msgs, "\n"), -1, "")
endf

fun LogAllMessages()
  redir => msgs
  silent messages
  redir END
  Log msgs
endf

fun GetFolds()
  let folds = []
  let linenr = 1
  while linenr <= line("$")
    if foldclosed(linenr) > -1
      let foldstart = linenr
      let foldend = foldclosedend(linenr)
      call add(folds, [foldstart, foldend])
      let linenr = foldend
    endif
    let linenr += 1
  endwhile
  return folds
endf

fun GetQFList()
  let qflist = getqflist()
  call map(qflist, {k,v -> {'lnum': v.lnum, 'text': substitute(v.text, nr2char(160), ' ', 'g')}})
  return qflist
endf

fun GetMatchCount(pattern)
  let match_count = execute('%s/'.a:pattern.'//gne')
  return str2nr(split(match_count)[0])
endf

" Provide test-time configuration via Lua config API
lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "javascript", "python", "ruby", "typescript" },
  sync_install = true,
  highlight = {
    enable = true,
  },
}
require('vigun.config').setup({
  dry_run = true,
  runners = {
  mocha = {
    enabled = function()
      local ft = vim.bo.filetype
      local f = vim.fn.expand('%')
      if (ft == 'javascript' or ft == 'typescript' or ft == 'javascriptreact' or ft == 'typescriptreact') then
        if not f:match('%.js$') then
          return true
        end
      end
      return f:match('Spec%.js$') ~= nil
    end,
    test_nodes = { 'it', 'xit' },
    context_nodes = { 'context', 'describe' },
    commands = {
      all = function(_)
        return './node_modules/.bin/mocha ' .. vim.fn.expand('%')
      end,
      ['debug-all'] = function(_)
        return './node_modules/.bin/mocha --inspect-brk --no-timeouts ' .. vim.fn.expand('%')
      end,
      nearest = function(info)
        local parts = {}
        for _, c in ipairs(info.context_titles) do table.insert(parts, c) end
        table.insert(parts, info.test_title)
        local title = table.concat(parts, ' ')
        local quoted = vim.fn.shellescape(title)
        return './node_modules/.bin/mocha --fgrep ' .. quoted .. ' ' .. vim.fn.expand('%')
      end,
      ['debug-nearest'] = function(info)
        local parts = {}
        for _, c in ipairs(info.context_titles) do table.insert(parts, c) end
        table.insert(parts, info.test_title)
        local title = table.concat(parts, ' ')
        local quoted = vim.fn.shellescape(title)
        return './node_modules/.bin/mocha --inspect-brk --no-timeouts --fgrep ' .. quoted .. ' ' .. vim.fn.expand('%')
      end,
    },
  },

  pytest = {
    enabled = function()
      return vim.fn.expand('%'):match('_test%.py$') ~= nil
    end,
    test_nodes = function(node, name)
      return node and node:type() == 'function_definition' and type(name) == 'string' and name:match('^test_') ~= nil
    end,
    context_nodes = function(node, _)
      return node and node:type() == 'class_definition'
    end,
    commands = {
      all = function(_)
        return 'pytest -s ' .. vim.fn.expand('%')
      end,
      nearest = function(info)
        local quoted = vim.fn.shellescape(info.test_title)
        return 'pytest -k ' .. quoted .. ' -s ' .. vim.fn.expand('%')
      end,
      ['debug-all'] = function(_)
        return 'pytest -vv -s ' .. vim.fn.expand('%')
      end,
      ['debug-nearest'] = function(info)
        local quoted = vim.fn.shellescape(info.test_title)
        return 'pytest -vv -k ' .. quoted .. ' -s ' .. vim.fn.expand('%')
      end,
    },
  },

  rspec = {
    enabled = function()
      return vim.fn.expand('%'):match('_spec%.rb$') ~= nil
    end,
    test_nodes = { 'it', 'xit' },
    context_nodes = { 'describe', 'context' },
    commands = {
      all = function(_)
        return 'rspec ' .. vim.fn.expand('%')
      end,
      nearest = function(_)
        return 'rspec ' .. vim.fn.expand('%') .. ':' .. vim.fn.line('.')
      end,
    },
  },
}})
EOF
