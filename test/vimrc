filetype off
set rtp+=vader.vim
set rtp+=.
filetype plugin indent on
syntax enable

" Install and configure nvim-treesitter for tests
if has('nvim')
  " Create a temporary plugin directory for treesitter
  let g:test_treesitter_dir = './tmp/nvim-treesitter'

  " Clone nvim-treesitter if not present
  if !isdirectory(g:test_treesitter_dir)
    call system('mkdir -p ./tmp')
    call system('git clone --depth 1 https://github.com/nvim-treesitter/nvim-treesitter.git ' . g:test_treesitter_dir)
  endif

  " Add to runtime path
  execute 'set rtp+=' . g:test_treesitter_dir

  " Configure treesitter
  lua << EOF
  require'nvim-treesitter.configs'.setup {
    ensure_installed = { "javascript", "python", "ruby", "typescript" },
    sync_install = true,
    highlight = {
      enable = true,
    },
  }
EOF
endif

fun GetLastMessage()
  redir => msgs
  silent messages
  redir END
  return get(split(msgs, "\n"), -1, "")
endf

fun LogAllMessages()
  redir => msgs
  silent messages
  redir END
  Log msgs
endf

fun GetFolds()
  let folds = []
  let linenr = 1
  while linenr <= line("$")
    if foldclosed(linenr) > -1
      let foldstart = linenr
      let foldend = foldclosedend(linenr)
      call add(folds, [foldstart, foldend])
      let linenr = foldend
    endif
    let linenr += 1
  endwhile
  return folds
endf

fun GetQFList()
  let qflist = getqflist()
  call map(qflist, {k,v -> {'lnum': v.lnum, 'text': substitute(v.text, nr2char(160), ' ', 'g')}})
  return qflist
endf

fun GetMatchCount(pattern)
  let match_count = execute('%s/'.a:pattern.'//gne')
  return str2nr(split(match_count)[0])
endf

let g:vigun_dry_run=1
let g:vigun_debug = 1
